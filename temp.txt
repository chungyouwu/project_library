利用 Python 來實現效率監控、發送郵件和資料分析的系統，可以幫助你有效地監控 PostgreSQL 的性能並及時發出警報，還能對收集到的數據進行分析和報告。以下是實現這個系統的詳細步驟和程式範例。
使用 psycopg2 連接資料庫，定期執行 SQL 查詢，收集各種性能指標。

import psycopg2
import time

def collect_metrics():
    conn = psycopg2.connect(
        dbname="your_database",
        user="your_user",
        password="your_password",
        host="your_host"
    )
    cur = conn.cursor()

    # 查詢數據庫效能指標
    cur.execute("SELECT numbackends, xact_commit, xact_rollback, blks_read, blks_hit FROM pg_stat_database;")
    metrics = cur.fetchall()

    conn.close()
    return metrics

while True:
    metrics = collect_metrics()
    # 在此處可以選擇將指標保存到文件或數據庫
    print(metrics)
    time.sleep(300)  # 每五分鐘收集一次指標

當監控系統檢測到異常（如查詢延遲過高或連接數過多）時，自動發送電子郵件通知相關人員。
import smtplib
from email.mime.text import MIMEText

def send_email(subject, body, to_email):
    msg = MIMEText(body)
    msg['Subject'] = subject
    msg['From'] = "monitoring@example.com"
    msg['To'] = to_email

    with smtplib.SMTP('smtp.example.com') as server:
        server.login("your_email@example.com", "your_password")
        server.sendmail("monitoring@example.com", to_email, msg.as_string())

# 假設在這裡檢測到異常
if some_condition_detected:
    send_email("PostgreSQL 警報", "查詢延遲過高，請立即檢查。", "dba_team@example.com")





對收集到的性能指標進行分析，生成報告或可視化圖表，幫助你了解資料庫的性能趨勢。

import pandas as pd
import matplotlib.pyplot as plt

# 假設我們有已收集的性能數據
data = {
    'timestamp': ['2024-08-01 12:00', '2024-08-01 12:05', '2024-08-01 12:10'],
    'numbackends': [20, 25, 22],
    'xact_commit': [1000, 1100, 1150],
    'xact_rollback': [10, 12, 11],
}

df = pd.DataFrame(data)

# 將時間戳轉為日期時間格式
df['timestamp'] = pd.to_datetime(df['timestamp'])

# 繪製查詢提交數量的趨勢圖
plt.plot(df['timestamp'], df['xact_commit'], label='Transaction Commits')
plt.xlabel('Time')
plt.ylabel('Commits')
plt.title('Transaction Commit Trend')
plt.legend()
plt.grid(True)
plt.show()




